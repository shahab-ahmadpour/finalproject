// <auto-generated />
using System;
using App.Infrastructure.Db.SqlServer.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250307100350_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Locations.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تبریز",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "ارومیه",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "کرج",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران",
                            ProvinceId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "شهرکرد",
                            ProvinceId = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "بیرجند",
                            ProvinceId = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "مشهد",
                            ProvinceId = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = "بجنورد",
                            ProvinceId = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = "اهواز",
                            ProvinceId = 13
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان",
                            ProvinceId = 14
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان",
                            ProvinceId = 15
                        },
                        new
                        {
                            Id = 16,
                            Name = "زاهدان",
                            ProvinceId = 16
                        },
                        new
                        {
                            Id = 17,
                            Name = "شیراز",
                            ProvinceId = 17
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین",
                            ProvinceId = 18
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم",
                            ProvinceId = 19
                        },
                        new
                        {
                            Id = 20,
                            Name = "سنندج",
                            ProvinceId = 20
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان",
                            ProvinceId = 21
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه",
                            ProvinceId = 22
                        },
                        new
                        {
                            Id = 23,
                            Name = "یاسوج",
                            ProvinceId = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = "گرگان",
                            ProvinceId = 24
                        },
                        new
                        {
                            Id = 25,
                            Name = "رشت",
                            ProvinceId = 25
                        },
                        new
                        {
                            Id = 26,
                            Name = "خرم‌آباد",
                            ProvinceId = 26
                        },
                        new
                        {
                            Id = 27,
                            Name = "ساری",
                            ProvinceId = 27
                        },
                        new
                        {
                            Id = 28,
                            Name = "اراک",
                            ProvinceId = 28
                        },
                        new
                        {
                            Id = 29,
                            Name = "بندرعباس",
                            ProvinceId = 29
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان",
                            ProvinceId = 30
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد",
                            ProvinceId = 31
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Locations.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "خدمات نظافتی وسیله نقلیه و منزل و شرکت‌ها",
                            ImagePath = "images\\Categories\\tamizkari\\1.webp",
                            IsActive = true,
                            Name = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            Description = "خدمات مربوط به ساخت و ساز",
                            ImagePath = "images\\Categories\\sakhteman\\1.webp",
                            IsActive = true,
                            Name = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            Description = "خدمات تعمیر لوازم شخصی و خانگی و تجهیزات الکترونیکی",
                            ImagePath = "images\\Categories\\tamirat\\1.webp",
                            IsActive = true,
                            Name = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            Description = "خدمات حمل بار و اسباب کشی و جابجایی اشیا",
                            ImagePath = "images\\Categories\\asbabkeshi\\1.webp",
                            IsActive = true,
                            Name = "اسباب کشی"
                        },
                        new
                        {
                            Id = 5,
                            Description = "خدمات تعمیر و سرویس و نظافت وسیله نقلیه",
                            ImagePath = "images\\Categories\\khodro\\1.webp",
                            IsActive = true,
                            Name = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            Description = "خدمات پزشکی و پرستاری و مشاوره",
                            ImagePath = "images\\Categories\\salamti\\1.webp",
                            IsActive = true,
                            Name = "سلامت و زیبایی"
                        },
                        new
                        {
                            Id = 7,
                            Description = "خدمات دیگر",
                            ImagePath = "images\\Categories\\sayer\\1.webp",
                            IsActive = true,
                            Name = "سایر"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.HomeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("HomeServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "انواع خدمات نظافت کار در منزل  و پذیرایی برای مجالس",
                            ImagePath = "images\\HomeServices\\nezafat\\1.webp",
                            IsActive = true,
                            Name = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "خدمات نظافت تخصصی",
                            ImagePath = "images\\HomeServices\\shoshtosho\\1.webp",
                            IsActive = true,
                            Name = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "خدمات تعمیرات تخصصی سیستم های سرمایشی و گرمایشی",
                            ImagePath = "images\\HomeServices\\saramyesh\\1.webp",
                            IsActive = true,
                            Name = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "خدمات تعمیرات مربوط به ساختمان و نما",
                            ImagePath = "images\\HomeServices\\taamiratsakhteman\\1.webp",
                            IsActive = true,
                            Name = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "خدمات تخصصی تعمیر لوله ساختمان",
                            ImagePath = "images\\HomeServices\\lolekeshi\\1.webp",
                            IsActive = true,
                            Name = "لوله کشی"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "خدمات تخصصی برق و سیم کشی ساختمان",
                            ImagePath = "images\\HomeServices\\barghkari\\1.webp",
                            IsActive = true,
                            Name = "برقکاری"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "تعمیرات تخصصی انواع لوازم های خانگی",
                            ImagePath = "images\\HomeServices\\lavazemkhanegi\\1.webp",
                            IsActive = true,
                            Name = "نصب و تعمیرات لوازم خانگی"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "تعمیرات تخصصی کامپیوتر های شخصی و لپ تاپ",
                            ImagePath = "images\\HomeServices\\Computer\\1.webp",
                            IsActive = true,
                            Name = "خدمات کامپیتوتری"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "تعمیرات تخصصی انواع تلفن همراه",
                            ImagePath = "images\\HomeServices\\Mobile\\1.webp",
                            IsActive = true,
                            Name = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            Description = "خدمات تخصصی برای جابجایی و باربری",
                            ImagePath = "images\\HomeServices\\barbari\\1.webp",
                            IsActive = true,
                            Name = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            Description = "تعمیرات تخصصی خودرو و وسیله های نقلیه",
                            ImagePath = "images\\HomeServices\\khodro\\1.webp",
                            IsActive = true,
                            Name = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 5,
                            Description = "خدمات نظافت خودرو",
                            ImagePath = "images\\HomeServices\\carwash\\1.webp",
                            IsActive = true,
                            Name = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            Description = "خدمات پزشکی و درمانی",
                            ImagePath = "images\\HomeServices\\pezeshki\\1.webp",
                            IsActive = true,
                            Name = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 6,
                            Description = "خدمات دامپزشکی و حیوانات خانگی",
                            ImagePath = "images\\HomeServices\\pet\\1.webp",
                            IsActive = true,
                            Name = "حیوانات خانگی"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 7,
                            Description = "خدمات و تعمیر انواع لباس های مردانه و زنانه",
                            ImagePath = "images\\HomeServices\\khayati\\1.webp",
                            IsActive = true,
                            Name = "خیاطی و تعیمرات لباس"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 7,
                            Description = "خدمات مجالس و تشریفات",
                            ImagePath = "images\\HomeServices\\event\\1.webp",
                            IsActive = true,
                            Name = "مجالس و رویداد ها"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 7,
                            Description = "خدمات آموزشی",
                            ImagePath = "images\\HomeServices\\amoozesh\\1.webp",
                            IsActive = true,
                            Name = "آموزش"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ProposalId")
                        .IsUnique()
                        .HasFilter("[ProposalId] IS NOT NULL");

                    b.HasIndex("RequestId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SkillId");

                    b.ToTable("Proposals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6414),
                            Description = "پیشنهاد انجام خدمات برای درخواست بنایی",
                            ExecutionDate = new DateTime(2025, 3, 12, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6408),
                            ExpertId = 1,
                            IsEnabled = true,
                            Price = 450000m,
                            RequestId = 1,
                            ResponseTime = new DateTime(2025, 3, 8, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6412),
                            SkillId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6419),
                            Description = "پیشنهاد انجام خدمات برای درخواست کاغذ دیواری",
                            ExecutionDate = new DateTime(2025, 3, 10, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6417),
                            ExpertId = 1,
                            IsEnabled = true,
                            Price = 600000m,
                            RequestId = 2,
                            ResponseTime = new DateTime(2025, 3, 8, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6418),
                            SkillId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6422),
                            Description = "پیشنهاد انجام خدمات برای درخواست سنگ کاری",
                            ExecutionDate = new DateTime(2025, 3, 14, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6421),
                            ExpertId = 2,
                            IsEnabled = false,
                            Price = 780000m,
                            RequestId = 3,
                            ResponseTime = new DateTime(2025, 3, 9, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(6421),
                            SkillId = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EnvironmentImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubHomeServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SubHomeServiceId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(827),
                            CustomerId = 1,
                            Deadline = new DateTime(2025, 3, 12, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(821),
                            Description = "درخواست بنایی ساختمان",
                            ExecutionDate = new DateTime(2025, 3, 10, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(827),
                            IsEnabled = true,
                            Status = 0,
                            SubHomeServiceId = 10
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(831),
                            CustomerId = 1,
                            Deadline = new DateTime(2025, 3, 14, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(830),
                            Description = "درخواست کاغذ دیواری",
                            ExecutionDate = new DateTime(2025, 3, 12, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(830),
                            IsEnabled = true,
                            Status = 0,
                            SubHomeServiceId = 11
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(834),
                            CustomerId = 2,
                            Deadline = new DateTime(2025, 3, 17, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(833),
                            Description = "درخواست سنگ کاری",
                            ExecutionDate = new DateTime(2025, 3, 15, 10, 3, 49, 467, DateTimeKind.Utc).AddTicks(833),
                            IsEnabled = true,
                            Status = 0,
                            SubHomeServiceId = 12
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.SubHomeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HomeServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("HomeServiceId");

                    b.ToTable("SubHomeServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 300000m,
                            Description = "خدمات نظافت عادی ",
                            HomeServiceId = 1,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\nezafat\\service adi.jpg",
                            IsActive = true,
                            Name = "سرویس عادی نظافت",
                            Views = 0
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 500000m,
                            Description = "خدمات نظافت ویژه",
                            HomeServiceId = 1,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\nezafat\\service vizhe.jpg",
                            IsActive = true,
                            Name = "سرویس ویژه نظافت ",
                            Views = 0
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 300000m,
                            Description = "نظافت راه پله های ساختمان مسکونی ",
                            HomeServiceId = 1,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\nezafat\\rah pele.jpg",
                            IsActive = true,
                            Name = "نظافت راه پله",
                            Views = 0
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 300000m,
                            Description = "شستشوی فرش",
                            HomeServiceId = 2,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\shostosho\\ghalishoie.jpg",
                            IsActive = true,
                            Name = "قالیشویی",
                            Views = 0
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 300000m,
                            Description = "خشکشویی انواع لباس های شما",
                            HomeServiceId = 2,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\shostosho\\khoshkshoie.jpg",
                            IsActive = true,
                            Name = "خشکشویی",
                            Views = 0
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 300000m,
                            Description = "انواع خدمات شستشو مبل موکت تشک",
                            HomeServiceId = 2,
                            ImagePath = "images\\SubHomeServices\\tamizkari\\shostosho\\shostesho dar mahal.jpg",
                            IsActive = true,
                            Name = "شستشو در محل",
                            Views = 0
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 300000m,
                            Description = "انواع خدمات و تعمیرات تخصصی کولر آبی",
                            HomeServiceId = 3,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\garmayesh sarmayesh\\coolerabi.jpg",
                            IsActive = true,
                            Name = "تعمیر کولر آبی و سرویس کولر آبی",
                            Views = 0
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 300000m,
                            Description = "تعمیر پکیج",
                            HomeServiceId = 3,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\garmayesh sarmayesh\\pakgegarm.jpg",
                            IsActive = true,
                            Name = "تعمیر و سرویس پکیج",
                            Views = 0
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 300000m,
                            Description = "انواع خدمات و تعمیرات تخصصی رادیاتور",
                            HomeServiceId = 3,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\garmayesh sarmayesh\\shofazh.jpg",
                            IsActive = true,
                            Name = "سرویس رادیاتور و تعمیر شوفاژ",
                            Views = 0
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 300000m,
                            Description = "خدمات بنایی",
                            HomeServiceId = 4,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\tamiratsakhteman\\banaie.jpg",
                            IsActive = true,
                            Name = "بنایی",
                            Views = 0
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 300000m,
                            Description = "نصب کاغذ دیواری",
                            HomeServiceId = 4,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\tamiratsakhteman\\kaqazdivari.jpg",
                            IsActive = true,
                            Name = "کاغذ دیواری",
                            Views = 0
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 300000m,
                            Description = "خدمات سنگ کاری",
                            HomeServiceId = 4,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\tamiratsakhteman\\sangkari.jpg",
                            IsActive = true,
                            Name = "سنگ کاری",
                            Views = 0
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 300000m,
                            Description = "نصب شیرآلات ساختمانی و بهداشتی",
                            HomeServiceId = 5,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\lole keshi\\shiralat.jpg",
                            IsActive = true,
                            Name = "شیرآلات",
                            Views = 0
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 300000m,
                            Description = "تخلیه چاه و لوله بازکنی",
                            HomeServiceId = 5,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\garmayesh sarmayesh\\takhliye chah.jpg",
                            IsActive = true,
                            Name = "لوله بازکنی",
                            Views = 0
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 300000m,
                            Description = "تعمیر و سرویس پمپ آب خانگی",
                            HomeServiceId = 5,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\garmayesh sarmayesh\\pomp ab.jpg",
                            IsActive = true,
                            Name = "پمپ آب",
                            Views = 0
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 300000m,
                            Description = "سیم کشی ساختمان - برق کشی ساختمان",
                            HomeServiceId = 6,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\barghkari\\simkeshi.jpg",
                            IsActive = true,
                            Name = "سیم کشی",
                            Views = 0
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 300000m,
                            Description = "نصب و تعمیر لوستر",
                            HomeServiceId = 6,
                            ImagePath = "images\\SubHomeServices\\Sakhteman\\barghkari\\cheragh.jpg",
                            IsActive = true,
                            Name = "نصب چراغ",
                            Views = 0
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 300000m,
                            Description = "تعمیرات تخصصی یخچال",
                            HomeServiceId = 7,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\nasb va taamirat\\2.jpg",
                            IsActive = true,
                            Name = "نصب و تعمیر یخچال",
                            Views = 0
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 300000m,
                            Description = "تعمیرات تخصصی ماشین لباسشویی",
                            HomeServiceId = 7,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\nasb va taamirat\\1.jpg",
                            IsActive = true,
                            Name = "نصب و تعمیر ماشین لباسشویی",
                            Views = 0
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = 300000m,
                            Description = "تعمیرات تخصصی کامپیوتر و لپتاپ",
                            HomeServiceId = 8,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\khadamat computer\\1.webp",
                            IsActive = true,
                            Name = "تعمیر کامپیوتر و لپتاپ",
                            Views = 0
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی شبکه",
                            HomeServiceId = 8,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\khadamat computer\\2.webp",
                            IsActive = true,
                            Name = "پشتیبانی شبکه و سرور",
                            Views = 0
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = 300000m,
                            Description = "تعمیرات تخصصی تاچ و ال سی دی موبایل",
                            HomeServiceId = 9,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\mobile\\2.jpg",
                            IsActive = true,
                            Name = "خدمات تاچ و ال سی دی",
                            Views = 0
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی و تعویض باتری موبایل",
                            HomeServiceId = 9,
                            ImagePath = "images\\SubHomeServices\\TamiratAshia\\mobile\\1.jpg",
                            IsActive = true,
                            Name = "خدمات باتری",
                            Views = 0
                        },
                        new
                        {
                            Id = 24,
                            BasePrice = 300000m,
                            Description = "حمل و باربری اشیای سنگین با خاور و کامیون",
                            HomeServiceId = 10,
                            ImagePath = "images\\SubHomeServices\\Barbari\\Asbab keshi khavar\\1.jpg",
                            IsActive = true,
                            Name = "اسباب کشی با خاور و کامیون",
                            Views = 0
                        },
                        new
                        {
                            Id = 25,
                            BasePrice = 300000m,
                            Description = "حمل و باربری اشیا با وانت و نیسان",
                            HomeServiceId = 10,
                            ImagePath = "images\\SubHomeServices\\Barbari\\Asbab keshi khavar\\2.jpg",
                            IsActive = true,
                            Name = "اسباب کشی با وانت و نیسان",
                            Views = 0
                        },
                        new
                        {
                            Id = 26,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی مکانیک خودرو",
                            HomeServiceId = 11,
                            ImagePath = "images\\SubHomeServices\\khodro\\khdamat khodro\\1.jpg",
                            IsActive = true,
                            Name = "مکانیکی خودرو",
                            Views = 0
                        },
                        new
                        {
                            Id = 27,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی تعویض باتری خودرو",
                            HomeServiceId = 11,
                            ImagePath = "images\\SubHomeServices\\khodro\\khdamat khodro\\2.jpg",
                            IsActive = true,
                            Name = "تعویض باتری خودرو",
                            Views = 0
                        },
                        new
                        {
                            Id = 28,
                            BasePrice = 300000m,
                            Description = "خدمات کارواش نانو وسیله نقلیه",
                            HomeServiceId = 12,
                            ImagePath = "images\\SubHomeServices\\khodro\\carwash\\1.jpg",
                            IsActive = true,
                            Name = "کارواش نانو",
                            Views = 0
                        },
                        new
                        {
                            Id = 29,
                            BasePrice = 300000m,
                            Description = "خدمات واکس و پولیش خودرو",
                            HomeServiceId = 12,
                            ImagePath = "images\\SubHomeServices\\khodro\\carwash\\2.jpg",
                            IsActive = true,
                            Name = "واکس و پولیش خودرو",
                            Views = 0
                        },
                        new
                        {
                            Id = 30,
                            BasePrice = 300000m,
                            Description = "خدمات معاینه پزشکی",
                            HomeServiceId = 13,
                            ImagePath = "images\\SubHomeServices\\salamati\\pezeshki\\1.jpg",
                            IsActive = true,
                            Name = "معاینه پزشکی",
                            Views = 0
                        },
                        new
                        {
                            Id = 31,
                            BasePrice = 300000m,
                            Description = "خدمات پرستاری و تزریقات در محل",
                            HomeServiceId = 13,
                            ImagePath = "images\\SubHomeServices\\salamati\\pezeshki\\2.jpg",
                            IsActive = true,
                            Name = "پرستاری و تزریقات",
                            Views = 0
                        },
                        new
                        {
                            Id = 32,
                            BasePrice = 300000m,
                            Description = "خدمات دامپزشکی انواع حیوانات خانگی",
                            HomeServiceId = 14,
                            ImagePath = "images\\SubHomeServices\\salamati\\dampezeshki\\1.jpg",
                            IsActive = true,
                            Name = "خدمات دامپزشکی در محل",
                            Views = 0
                        },
                        new
                        {
                            Id = 33,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی تعمیر انواع لباس",
                            HomeServiceId = 15,
                            ImagePath = "images\\SubHomeServices\\Sayer\\khayati lebas\\1.jpg",
                            IsActive = true,
                            Name = "تعمیرات لباس",
                            Views = 0
                        },
                        new
                        {
                            Id = 34,
                            BasePrice = 300000m,
                            Description = "خدمات تخصصی تعمیر انواع کیف و کفش",
                            HomeServiceId = 15,
                            ImagePath = "images\\SubHomeServices\\Sayer\\khayati lebas\\2.jpg",
                            IsActive = true,
                            Name = "تعمیر کیف و کفش",
                            Views = 0
                        },
                        new
                        {
                            Id = 35,
                            BasePrice = 300000m,
                            Description = "خدمات انواع کیک و شیرینی های مجالس و مراسم",
                            HomeServiceId = 16,
                            ImagePath = "images\\SubHomeServices\\Sayer\\Sayer\\event\\1.jpg",
                            IsActive = true,
                            Name = "کیک و شیرینی",
                            Views = 0
                        },
                        new
                        {
                            Id = 36,
                            BasePrice = 300000m,
                            Description = "خدمات ارسال هدیه",
                            HomeServiceId = 16,
                            ImagePath = "images\\SubHomeServices\\Sayer\\Sayer\\event\\2.jpg",
                            IsActive = true,
                            Name = "ارسال هدیه",
                            Views = 0
                        },
                        new
                        {
                            Id = 37,
                            BasePrice = 300000m,
                            Description = "انواع خدمات آموزشی  برای آمادگی کنکور",
                            HomeServiceId = 17,
                            ImagePath = "images\\SubHomeServices\\Sayer\\amoozesh\\1.jpg",
                            IsActive = true,
                            Name = "آمادگی برای کنکور",
                            Views = 0
                        },
                        new
                        {
                            Id = 38,
                            BasePrice = 300000m,
                            Description = "خدمات آموزشی انواع زبان های خارجی",
                            HomeServiceId = 17,
                            ImagePath = "images\\SubHomeServices\\Sayer\\amoozesh\\2.jpg",
                            IsActive = true,
                            Name = "آموزش زبان های خارجی",
                            Views = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Skills.Entities.ExpertSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("SkillId");

                    b.ToTable("ExpertSkills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpertId = 1,
                            SkillId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpertId = 1,
                            SkillId = 2
                        },
                        new
                        {
                            Id = 3,
                            ExpertId = 2,
                            SkillId = 3
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Skills.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubHomeServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubHomeServiceId");

                    b.ToTable("Skills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بنایی",
                            SubHomeServiceId = 10
                        },
                        new
                        {
                            Id = 2,
                            Name = "کاغذ دیواری",
                            SubHomeServiceId = 11
                        },
                        new
                        {
                            Id = 3,
                            Name = "سنگ کاری",
                            SubHomeServiceId = 12
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Transactions.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("AccountBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AccountBalance = 1000m,
                            ConcurrencyStamp = "3f01898b-ab43-4532-84a9-2d535f09d8b9",
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 469, DateTimeKind.Utc).AddTicks(8703),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsConfirmed = true,
                            IsEnabled = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAbfgAlNw72yyrTPGrqz0VB+dualL4wwYyoua9s1IoKjCubauIRzBCbI8664jaAmA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images\\User\\Admin\\admin.png",
                            Role = 3,
                            SecurityStamp = "36eb3ad0-b9f6-49fd-9529-250b48ab24a5",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AccountBalance = 2000000m,
                            ConcurrencyStamp = "af3902cf-2fb3-4443-89a2-7b4d12a029b8",
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 525, DateTimeKind.Utc).AddTicks(8610),
                            Email = "ali@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "علی",
                            IsConfirmed = true,
                            IsEnabled = true,
                            LastName = "عباسی",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNqomD1Ue5fN5gn+s99zpzb53rUpgydkqyV3QkJhbAUY9GzZb5b5IbEc+YZ5zmBHg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images\\User\\Customer\\ali.jpg",
                            Role = 1,
                            SecurityStamp = "26dba629-3910-4982-8fd1-07b8c1989480",
                            TwoFactorEnabled = false,
                            UserName = "ali@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AccountBalance = 2000000m,
                            ConcurrencyStamp = "daadc522-d356-4c6e-bc4d-b90d14a28567",
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 583, DateTimeKind.Utc).AddTicks(9999),
                            Email = "sina47@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "سینا",
                            IsConfirmed = false,
                            IsEnabled = true,
                            LastName = "مرادی",
                            LockoutEnabled = false,
                            NormalizedEmail = "SINA47@GMAIL.COM",
                            NormalizedUserName = "SINA47@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHLQyP7hZTgtanH6IE7yGAvPJ6xKZF6cFinzqHo/vRjVdA/gU7aQqnTJBjzWc+5b9w==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images\\User\\Customer\\sina.png",
                            Role = 1,
                            SecurityStamp = "07969a58-7e6f-4191-b684-fe653bb6189c",
                            TwoFactorEnabled = false,
                            UserName = "sina47@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AccountBalance = 750m,
                            ConcurrencyStamp = "52337636-c848-4217-899a-ab5030381a75",
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 639, DateTimeKind.Utc).AddTicks(2354),
                            Email = "shahin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "شاهین",
                            IsConfirmed = false,
                            IsEnabled = true,
                            LastName = "حسنی",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAHIN@GMAIL.COM",
                            NormalizedUserName = "SHAHIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJysqcorUzG0rX80V4METmwWTwZRnJJkYKzKxPv9WRe7WZ3/rYm2kLJKgBzBDTLhBQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images\\User\\Expert\\shahin.png",
                            Role = 2,
                            SecurityStamp = "bb127e55-198c-4ba5-babc-fa9579b72348",
                            TwoFactorEnabled = false,
                            UserName = "shahin@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AccountBalance = 100m,
                            ConcurrencyStamp = "4fdb65b9-a8ea-4913-9a68-278631cd6cd4",
                            CreatedAt = new DateTime(2025, 3, 7, 10, 3, 49, 695, DateTimeKind.Utc).AddTicks(5026),
                            Email = "karimi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "فاطمه",
                            IsConfirmed = false,
                            IsEnabled = true,
                            LastName = "کریمی",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARIMI@GMAIL.COM",
                            NormalizedUserName = "KARIMI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJauoyjsSP430xF65mgN0pnIuwRMIYRzWhd/2pBOXfxT3L7JYVpiVNuNxn15DXVejg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images\\User\\Expert\\fatemeh.png",
                            Role = 2,
                            SecurityStamp = "4dec609e-1af3-4952-992e-af91a030c06a",
                            TwoFactorEnabled = false,
                            UserName = "karimi@gmail.com"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "شبنم یکم",
                            AppUserId = 2,
                            City = "تهران",
                            PhoneNumber = "09121232165",
                            State = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Address = "پونک",
                            AppUserId = 3,
                            City = "تهران",
                            PhoneNumber = "09195638521",
                            State = "تهران"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "کوچه مهناز",
                            AppUserId = 4,
                            City = "تهران",
                            PhoneNumber = "09302226858",
                            State = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Address = "تهران پارس",
                            AppUserId = 5,
                            City = "تهران",
                            PhoneNumber = "09356985214",
                            State = "تهران"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Locations.City", b =>
                {
                    b.HasOne("App.Domain.Core.Locations.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.HomeService", b =>
                {
                    b.HasOne("App.Domain.Core.Services.Entities.Category", "Category")
                        .WithMany("HomeServices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Order", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Users.Entities.Expert", "Expert")
                        .WithMany("Orders")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Services.Entities.Proposal", "Proposal")
                        .WithOne("Order")
                        .HasForeignKey("App.Domain.Core.Services.Entities.Order", "ProposalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Domain.Core.Services.Entities.Request", "Request")
                        .WithMany("Orders")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Proposal");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Proposal", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Expert", "Expert")
                        .WithMany("Proposals")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Services.Entities.Request", "Request")
                        .WithMany("Proposals")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Skills.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Request", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Services.Entities.SubHomeService", "SubHomeService")
                        .WithMany("Requests")
                        .HasForeignKey("SubHomeServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SubHomeService");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Review", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Users.Entities.Expert", "Expert")
                        .WithMany("Reviews")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Services.Entities.Order", "Order")
                        .WithOne()
                        .HasForeignKey("App.Domain.Core.Services.Entities.Review", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.SubHomeService", b =>
                {
                    b.HasOne("App.Domain.Core.Services.Entities.HomeService", "HomeService")
                        .WithMany("SubHomeServices")
                        .HasForeignKey("HomeServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeService");
                });

            modelBuilder.Entity("App.Domain.Core.Skills.Entities.ExpertSkill", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Expert", "Expert")
                        .WithMany("ExpertSkills")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Skills.Entities.Skill", "Skill")
                        .WithMany("ExpertSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("App.Domain.Core.Skills.Entities.Skill", b =>
                {
                    b.HasOne("App.Domain.Core.Services.Entities.SubHomeService", "SubHomeService")
                        .WithMany("Skills")
                        .HasForeignKey("SubHomeServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubHomeService");
                });

            modelBuilder.Entity("App.Domain.Core.Transactions.Entities.Transaction", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Users.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Services.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("App.Domain.Core.Users.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.Users.Entities.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", "AppUser")
                        .WithOne("Expert")
                        .HasForeignKey("App.Domain.Core.Users.Entities.Expert", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Users.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Locations.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Category", b =>
                {
                    b.Navigation("HomeServices");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.HomeService", b =>
                {
                    b.Navigation("SubHomeServices");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Proposal", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.Request", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("App.Domain.Core.Services.Entities.SubHomeService", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("App.Domain.Core.Skills.Entities.Skill", b =>
                {
                    b.Navigation("ExpertSkills");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("App.Domain.Core.Users.Entities.Expert", b =>
                {
                    b.Navigation("ExpertSkills");

                    b.Navigation("Orders");

                    b.Navigation("Proposals");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
